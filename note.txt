module.fnet.conv1.weight : torch.Size([64, 3, 7, 7])
module.fnet.conv1.bias : torch.Size([64])
module.fnet.layer1.0.conv1.weight : torch.Size([64, 64, 3, 3])
module.fnet.layer1.0.conv1.bias : torch.Size([64])
module.fnet.layer1.0.conv2.weight : torch.Size([64, 64, 3, 3])
module.fnet.layer1.0.conv2.bias : torch.Size([64])
module.fnet.layer1.1.conv1.weight : torch.Size([64, 64, 3, 3])
module.fnet.layer1.1.conv1.bias : torch.Size([64])
module.fnet.layer1.1.conv2.weight : torch.Size([64, 64, 3, 3])
module.fnet.layer1.1.conv2.bias : torch.Size([64])
module.fnet.layer2.0.conv1.weight : torch.Size([96, 64, 3, 3])
module.fnet.layer2.0.conv1.bias : torch.Size([96])
module.fnet.layer2.0.conv2.weight : torch.Size([96, 96, 3, 3])
module.fnet.layer2.0.conv2.bias : torch.Size([96])
module.fnet.layer2.0.downsample.0.weight : torch.Size([96, 64, 1, 1])
module.fnet.layer2.0.downsample.0.bias : torch.Size([96])
module.fnet.layer2.1.conv1.weight : torch.Size([96, 96, 3, 3])
module.fnet.layer2.1.conv1.bias : torch.Size([96])
module.fnet.layer2.1.conv2.weight : torch.Size([96, 96, 3, 3])
module.fnet.layer2.1.conv2.bias : torch.Size([96])
module.fnet.layer3.0.conv1.weight : torch.Size([128, 96, 3, 3])
module.fnet.layer3.0.conv1.bias : torch.Size([128])
module.fnet.layer3.0.conv2.weight : torch.Size([128, 128, 3, 3])
module.fnet.layer3.0.conv2.bias : torch.Size([128])
module.fnet.layer3.0.downsample.0.weight : torch.Size([128, 96, 1, 1])
module.fnet.layer3.0.downsample.0.bias : torch.Size([128])
module.fnet.layer3.1.conv1.weight : torch.Size([128, 128, 3, 3])
module.fnet.layer3.1.conv1.bias : torch.Size([128])
module.fnet.layer3.1.conv2.weight : torch.Size([128, 128, 3, 3])
module.fnet.layer3.1.conv2.bias : torch.Size([128])
module.fnet.conv2.weight : torch.Size([256, 128, 1, 1])
module.fnet.conv2.bias : torch.Size([256])
module.cnet.norm1.weight : torch.Size([64])
module.cnet.norm1.bias : torch.Size([64])
module.cnet.conv1.weight : torch.Size([64, 3, 7, 7])
module.cnet.conv1.bias : torch.Size([64])
module.cnet.layer1.0.conv1.weight : torch.Size([64, 64, 3, 3])
module.cnet.layer1.0.conv1.bias : torch.Size([64])
module.cnet.layer1.0.conv2.weight : torch.Size([64, 64, 3, 3])
module.cnet.layer1.0.conv2.bias : torch.Size([64])
module.cnet.layer1.0.norm1.weight : torch.Size([64])
module.cnet.layer1.0.norm1.bias : torch.Size([64])
module.cnet.layer1.0.norm2.weight : torch.Size([64])
module.cnet.layer1.0.norm2.bias : torch.Size([64])
module.cnet.layer1.1.conv1.weight : torch.Size([64, 64, 3, 3])
module.cnet.layer1.1.conv1.bias : torch.Size([64])
module.cnet.layer1.1.conv2.weight : torch.Size([64, 64, 3, 3])
module.cnet.layer1.1.conv2.bias : torch.Size([64])
module.cnet.layer1.1.norm1.weight : torch.Size([64])
module.cnet.layer1.1.norm1.bias : torch.Size([64])
module.cnet.layer1.1.norm2.weight : torch.Size([64])
module.cnet.layer1.1.norm2.bias : torch.Size([64])
module.cnet.layer2.0.conv1.weight : torch.Size([96, 64, 3, 3])
module.cnet.layer2.0.conv1.bias : torch.Size([96])
module.cnet.layer2.0.conv2.weight : torch.Size([96, 96, 3, 3])
module.cnet.layer2.0.conv2.bias : torch.Size([96])
module.cnet.layer2.0.norm1.weight : torch.Size([96])
module.cnet.layer2.0.norm1.bias : torch.Size([96])
module.cnet.layer2.0.norm2.weight : torch.Size([96])
module.cnet.layer2.0.norm2.bias : torch.Size([96])
module.cnet.layer2.0.norm3.weight : torch.Size([96])
module.cnet.layer2.0.norm3.bias : torch.Size([96])
module.cnet.layer2.0.downsample.0.weight : torch.Size([96, 64, 1, 1])
module.cnet.layer2.0.downsample.0.bias : torch.Size([96])
module.cnet.layer2.1.conv1.weight : torch.Size([96, 96, 3, 3])
module.cnet.layer2.1.conv1.bias : torch.Size([96])
module.cnet.layer2.1.conv2.weight : torch.Size([96, 96, 3, 3])
module.cnet.layer2.1.conv2.bias : torch.Size([96])
module.cnet.layer2.1.norm1.weight : torch.Size([96])
module.cnet.layer2.1.norm1.bias : torch.Size([96])
module.cnet.layer2.1.norm2.weight : torch.Size([96])
module.cnet.layer2.1.norm2.bias : torch.Size([96])
module.cnet.layer3.0.conv1.weight : torch.Size([128, 96, 3, 3])
module.cnet.layer3.0.conv1.bias : torch.Size([128])
module.cnet.layer3.0.conv2.weight : torch.Size([128, 128, 3, 3])
module.cnet.layer3.0.conv2.bias : torch.Size([128])
module.cnet.layer3.0.norm1.weight : torch.Size([128])
module.cnet.layer3.0.norm1.bias : torch.Size([128])
module.cnet.layer3.0.norm2.weight : torch.Size([128])
module.cnet.layer3.0.norm2.bias : torch.Size([128])
module.cnet.layer3.0.norm3.weight : torch.Size([128])
module.cnet.layer3.0.norm3.bias : torch.Size([128])
module.cnet.layer3.0.downsample.0.weight : torch.Size([128, 96, 1, 1])
module.cnet.layer3.0.downsample.0.bias : torch.Size([128])
module.cnet.layer3.1.conv1.weight : torch.Size([128, 128, 3, 3])
module.cnet.layer3.1.conv1.bias : torch.Size([128])
module.cnet.layer3.1.conv2.weight : torch.Size([128, 128, 3, 3])
module.cnet.layer3.1.conv2.bias : torch.Size([128])
module.cnet.layer3.1.norm1.weight : torch.Size([128])
module.cnet.layer3.1.norm1.bias : torch.Size([128])
module.cnet.layer3.1.norm2.weight : torch.Size([128])
module.cnet.layer3.1.norm2.bias : torch.Size([128])
module.cnet.conv2.weight : torch.Size([256, 128, 1, 1])
module.cnet.conv2.bias : torch.Size([256])
module.update_block.encoder.convc1.weight : torch.Size([256, 324, 1, 1])
module.update_block.encoder.convc1.bias : torch.Size([256])
module.update_block.encoder.convc2.weight : torch.Size([192, 256, 3, 3])
module.update_block.encoder.convc2.bias : torch.Size([192])
module.update_block.encoder.convf1.weight : torch.Size([128, 2, 7, 7])
module.update_block.encoder.convf1.bias : torch.Size([128])
module.update_block.encoder.convf2.weight : torch.Size([64, 128, 3, 3])
module.update_block.encoder.convf2.bias : torch.Size([64])
module.update_block.encoder.conv.weight : torch.Size([126, 256, 3, 3])
module.update_block.encoder.conv.bias : torch.Size([126])
module.update_block.gru.convz1.weight : torch.Size([128, 512, 1, 5])
module.update_block.gru.convz1.bias : torch.Size([128])
module.update_block.gru.convr1.weight : torch.Size([128, 512, 1, 5])
module.update_block.gru.convr1.bias : torch.Size([128])
module.update_block.gru.convq1.weight : torch.Size([128, 512, 1, 5])
module.update_block.gru.convq1.bias : torch.Size([128])
module.update_block.gru.convz2.weight : torch.Size([128, 512, 5, 1])
module.update_block.gru.convz2.bias : torch.Size([128])
module.update_block.gru.convr2.weight : torch.Size([128, 512, 5, 1])
module.update_block.gru.convr2.bias : torch.Size([128])
module.update_block.gru.convq2.weight : torch.Size([128, 512, 5, 1])
module.update_block.gru.convq2.bias : torch.Size([128])
module.update_block.flow_head.conv1.weight : torch.Size([256, 128, 3, 3])
module.update_block.flow_head.conv1.bias : torch.Size([256])
module.update_block.flow_head.conv2.weight : torch.Size([2, 256, 3, 3])
module.update_block.flow_head.conv2.bias : torch.Size([2])
module.update_block.mask.0.weight : torch.Size([256, 128, 3, 3])
module.update_block.mask.0.bias : torch.Size([256])
module.update_block.mask.2.weight : torch.Size([576, 256, 1, 1])
module.update_block.mask.2.bias : torch.Size([576])
module.update_block.aggregator.gamma : torch.Size([1])
module.update_block.aggregator.to_v.weight : torch.Size([128, 128, 1, 1])
module.att.to_qk.weight : torch.Size([256, 128, 1, 1])
module.att.pos_emb.rel_height.weight : torch.Size([319, 128])
module.att.pos_emb.rel_width.weight : torch.Size([319, 128])


tensor([ 0.0091, -0.0218,  0.0059,  0.0249,  0.0346, -0.0196,  0.0495, -0.0124,
        -0.0307,  0.0095, -0.0470,  0.0131,  0.0553,  0.0335,  0.0079, -0.0199,
         0.0505,  0.0062,  0.0086,  0.0216,  0.0083, -0.0299, -0.0309, -0.0179,
         0.0688, -0.0267,  0.0741,  0.0287,  0.0076,  0.0494, -0.0361, -0.0089,
        -0.0615,  0.0650,  0.0617,  0.0001,  0.0197, -0.0521, -0.0007, -0.0085,
         0.0318,  0.0433,  0.0149,  0.0227,  0.0568, -0.0145, -0.0156,  0.0647,
         0.0359,  0.0211, -0.0214, -0.0053, -0.0157, -0.0020,  0.0416,  0.0184,
         0.0172,  0.0221,  0.0475, -0.0122,  0.0236, -0.0053, -0.0012, -0.0368,
         0.0369, -0.0015,  0.0408, -0.0442,  0.0199,  0.0103, -0.0286,  0.0108,
         0.0267,  0.0122,  0.0187,  0.0180,  0.0196,  0.0219,  0.0261,  0.0116,
        -0.0100, -0.0334, -0.0219, -0.0027, -0.0894, -0.0039,  0.0417,  0.0436,
        -0.0227, -0.0085,  0.0259, -0.0117, -0.0482,  0.0051, -0.0106,  0.0240],
       device='cuda:0')
tensor([-9.3996e-03,  2.2677e-02, -1.8012e-02,  1.0832e-02, -2.8742e-02,
         1.0409e-02, -4.3257e-05,  1.4181e-02, -1.7118e-02, -2.9126e-02,
        -2.2190e-02,  2.7036e-02,  1.0994e-02,  7.9969e-03, -6.7210e-03,
         5.3404e-03,  1.2290e-02, -2.0988e-02,  1.4956e-02,  1.2118e-02,
         2.4695e-02,  2.6439e-02,  2.8272e-02, -6.8172e-03, -1.2338e-02,
        -2.0034e-02, -7.8160e-03,  8.2762e-04, -2.5436e-02, -1.9178e-02,
        -3.7831e-04,  2.6005e-02,  2.3586e-02, -1.7407e-03, -1.2343e-02,
        -6.6695e-03,  1.4720e-02,  2.5385e-02,  2.7875e-02,  2.5652e-02,
         2.7172e-02, -2.6771e-03, -2.0734e-02,  4.0590e-03, -9.2863e-03,
         8.8007e-03, -2.3884e-02,  1.5263e-02,  9.3679e-04,  2.2623e-02,
         4.4112e-03,  1.2261e-02, -1.8183e-02,  2.2916e-02, -1.9434e-02,
        -1.9534e-02, -4.5407e-03, -2.5210e-03, -2.5173e-02,  7.8506e-03,
         2.0928e-03,  2.6994e-02,  2.0188e-02, -8.2145e-03,  1.5846e-02,
        -8.3999e-03, -1.4763e-02,  7.6755e-03,  3.2661e-04,  2.3393e-02,
         2.3001e-02,  2.2971e-03, -2.8972e-03,  2.7763e-02, -1.4723e-02,
        -2.5084e-02,  6.3091e-03,  2.3401e-02,  1.1956e-02, -1.2820e-02,
         8.7342e-03,  2.8892e-03,  2.6310e-02, -1.1253e-02,  2.6890e-02,
        -2.0979e-02, -1.3926e-04, -1.5047e-02,  4.9887e-03, -1.0942e-02,
        -1.8965e-02,  9.5000e-03, -2.5493e-02, -1.6549e-02,  1.2466e-02,
        -2.1465e-02, -2.8380e-03, -2.4804e-02,  2.5424e-02,  2.6147e-02,
        -2.3840e-02, -2.6687e-02,  1.9428e-03,  1.3148e-02,  2.0282e-02,
         2.6066e-02,  2.6571e-02,  2.9322e-02, -1.3157e-02, -3.9282e-03,
         1.6574e-02,  1.8877e-02, -2.1256e-02, -1.5265e-03,  2.3890e-02,
        -2.7027e-02, -2.4583e-02, -2.2453e-02, -2.2232e-02,  1.0063e-02,
        -1.1350e-02, -1.4705e-03, -6.7480e-03, -2.2230e-02,  5.6155e-04,
         2.6919e-02,  1.8196e-02, -1.4274e-02, -3.2039e-03,  1.9415e-02,
         1.9663e-02,  2.7619e-02,  1.5534e-02, -2.5304e-02, -2.2516e-02,
         9.6827e-03, -1.8043e-02, -1.0560e-03,  1.5465e-02, -8.6126e-04,
         1.9935e-02, -4.4216e-03,  5.2664e-03, -1.0264e-02,  2.3983e-02,
         2.2389e-03,  7.9237e-03, -5.3320e-03, -1.1080e-03, -2.2410e-02,
        -2.5750e-02,  2.6573e-02, -6.6095e-03, -2.7494e-02,  4.3693e-03,
        -1.0455e-02, -2.1926e-02, -7.0314e-03,  1.9217e-03,  1.1216e-02,
        -2.7906e-02,  1.1473e-02, -2.1724e-02, -2.5815e-02, -8.8366e-03,
        -2.9398e-02, -2.8439e-02,  1.1150e-02, -1.8869e-02,  2.5776e-02,
         1.9695e-02,  1.9036e-02, -2.0886e-02,  1.3473e-02,  2.5397e-02,
        -8.3552e-03, -8.4108e-03,  3.2821e-03,  1.9823e-02,  1.5298e-02,
         2.9123e-03, -2.6782e-02,  1.2575e-02,  1.8350e-02,  1.1791e-02,
        -1.1460e-03,  5.6417e-03, -2.5707e-02,  3.0115e-03,  2.3071e-02,
         2.1564e-02, -2.0290e-02,  2.5637e-02, -4.9182e-03,  7.5521e-03,
        -1.6387e-02,  3.4401e-03, -1.7494e-03, -2.3008e-02,  2.2071e-02,
        -8.9378e-03,  4.1016e-03,  6.5180e-03, -1.4971e-02,  8.9537e-03,
        -1.6513e-02,  1.9485e-03, -1.0720e-02, -2.8246e-02,  2.4531e-02,
         6.7882e-03, -1.3482e-02, -2.1950e-03,  2.4755e-02, -1.7330e-02,
         2.4521e-02, -2.4635e-02,  3.9233e-03,  2.7448e-02, -1.2073e-02,
        -2.9130e-02,  1.6453e-02,  2.4351e-02,  2.2517e-02,  1.9626e-02,
        -3.0639e-03,  2.8542e-02, -2.5411e-02,  1.9743e-02,  1.9996e-03,
         1.6149e-02,  2.8706e-02,  1.1765e-02,  1.8681e-02, -1.4311e-02,
        -1.7901e-03,  1.2197e-02, -6.6402e-03,  1.1967e-02, -1.5829e-02,
        -1.5126e-02,  1.5055e-02,  1.7190e-02, -1.3207e-02, -1.3996e-03,
        -3.6831e-03, -1.0791e-02,  1.2396e-02,  1.9207e-02,  1.3835e-02,
         2.9068e-02, -1.5572e-02, -1.5116e-02,  1.6358e-03,  2.7468e-02,
         1.2620e-02], device='cuda:0')
tensor([ 1.3039e-02, -1.6323e-02, -7.5731e-03, -1.0942e-02, -2.3328e-04,
         5.8861e-03, -4.9745e-03,  6.4853e-04, -9.8131e-03, -6.2369e-03,
         1.5012e-02, -1.2086e-02, -4.4711e-03,  5.2161e-03, -1.6111e-02,
         1.6453e-02, -1.3831e-02,  1.6959e-03,  1.2663e-02, -1.1834e-02,
        -4.1592e-03, -1.0508e-02,  1.0108e-02, -8.9841e-03, -1.3748e-02,
        -7.3177e-03, -2.9259e-03, -6.1554e-03,  1.3747e-02,  7.6062e-03,
        -1.3103e-02, -9.2421e-03, -1.5840e-02, -1.6566e-02,  1.6800e-02,
         1.7415e-02, -3.4772e-03,  1.1113e-02, -1.4699e-02, -9.8398e-03,
         4.3169e-03, -1.0657e-02,  4.6005e-03,  4.4324e-03,  1.3532e-02,
        -5.6137e-03,  1.2260e-02, -6.8396e-03, -1.8382e-02, -1.7125e-02,
         7.1306e-03,  6.5365e-03, -1.4020e-02, -6.1842e-03, -8.9225e-03,
         1.8505e-02, -4.5764e-03, -7.8357e-03, -1.1694e-02, -1.2294e-02,
         9.1162e-04, -5.1333e-03,  1.7531e-02, -1.6259e-02,  5.7190e-04,
         1.0225e-03, -5.5007e-03, -1.2758e-02,  1.1022e-02,  1.8878e-03,
         6.1818e-03, -1.4886e-02, -1.1921e-03,  5.0130e-03,  8.7663e-03,
        -1.0628e-02,  1.6447e-02, -2.7378e-03, -1.4261e-05, -3.5231e-03,
        -1.4027e-02, -9.1130e-04,  1.8885e-04,  1.2559e-02, -1.6638e-02,
        -4.7897e-03,  1.6137e-02, -1.4638e-02, -1.4207e-02, -5.7169e-03,
         1.0068e-04,  1.3897e-02,  1.6025e-03, -1.9458e-02,  2.6720e-03,
         6.7948e-03,  1.6930e-02,  1.5053e-03, -1.9682e-02, -1.9484e-02,
         1.0207e-02, -1.4680e-02,  1.7597e-02, -1.2215e-02,  7.5770e-03,
         1.1242e-02,  1.3812e-02,  5.7377e-03,  6.9241e-03, -1.2116e-02,
        -4.1555e-03,  4.0052e-03,  1.1349e-02, -7.5489e-03, -3.4869e-03,
        -8.0908e-03,  1.3250e-02,  5.0870e-04,  2.6052e-03,  8.7719e-03,
         1.2971e-02,  1.4593e-02,  1.6891e-02, -4.1121e-03, -4.0409e-03,
         1.9003e-02, -1.4787e-02,  1.3039e-02], device='cuda:0')
tensor([[[[ 0.0800]],

         [[ 0.0617]],

         [[ 0.0012]],

         ...,

         [[ 0.0411]],

         [[ 0.0156]],

         [[ 0.0538]]],


        [[[ 0.0681]],

         [[-0.0567]],

         [[ 0.0523]],

         ...,

         [[ 0.0374]],

         [[-0.0218]],

         [[ 0.0309]]],


        [[[-0.0027]],

         [[ 0.0658]],

         [[ 0.0630]],

         ...,

         [[ 0.0675]],

         [[-0.0089]],

         [[-0.0003]]],


        ...,


        [[[ 0.0250]],

         [[ 0.0041]],

         [[ 0.0536]],

         ...,

         [[ 0.0541]],

         [[-0.0531]],

         [[ 0.0531]]],


        [[[-0.0512]],

         [[-0.0397]],

         [[ 0.0601]],

         ...,

         [[-0.0851]],

         [[ 0.0264]],

         [[ 0.0329]]],


        [[[ 0.0037]],

         [[-0.0169]],

         [[-0.0792]],

         ...,

         [[-0.0245]],

         [[ 0.0797]],

         [[ 0.0463]]]], device='cuda:0')
tensor([ 0.0091, -0.0218,  0.0059,  0.0249,  0.0346, -0.0196,  0.0495, -0.0124,
        -0.0307,  0.0095, -0.0470,  0.0131,  0.0553,  0.0335,  0.0079, -0.0199,
         0.0505,  0.0062,  0.0086,  0.0216,  0.0083, -0.0299, -0.0309, -0.0179,
         0.0688, -0.0267,  0.0741,  0.0287,  0.0076,  0.0494, -0.0361, -0.0089,
        -0.0615,  0.0650,  0.0617,  0.0001,  0.0197, -0.0521, -0.0007, -0.0085,
         0.0318,  0.0433,  0.0149,  0.0227,  0.0568, -0.0145, -0.0156,  0.0647,
         0.0359,  0.0211, -0.0214, -0.0053, -0.0157, -0.0020,  0.0416,  0.0184,
         0.0172,  0.0221,  0.0475, -0.0122,  0.0236, -0.0053, -0.0012, -0.0368,
         0.0369, -0.0015,  0.0408, -0.0442,  0.0199,  0.0103, -0.0286,  0.0108,
         0.0267,  0.0122,  0.0187,  0.0180,  0.0196,  0.0219,  0.0261,  0.0116,
        -0.0100, -0.0334, -0.0219, -0.0027, -0.0894, -0.0039,  0.0417,  0.0436,
        -0.0227, -0.0085,  0.0259, -0.0117, -0.0482,  0.0051, -0.0106,  0.0240],
       device='cuda:0')
tensor([ 0.1423,  0.1991, -0.1141, -0.0847, -0.0552,  0.0521, -0.0697,  0.0569,
        -0.0451, -0.0832, -0.1632, -0.1278, -0.2275,  0.0559,  0.0626,  0.0971,
         0.0533, -0.0141,  0.0735,  0.0268,  0.1448,  0.0207,  0.0427,  0.0211,
        -0.1609,  0.0921, -0.1952,  0.1045, -0.0484,  0.0765, -0.0667,  0.0604,
         0.0081,  0.0781, -0.0944, -0.0856, -0.1669, -0.1959,  0.0017,  0.0752,
         0.0830, -0.1642, -0.1635,  0.0462, -0.1309,  0.0052,  0.0397,  0.1321,
         0.0746, -0.1322,  0.0205, -0.0265,  0.0871, -0.0119, -0.1408, -0.1098,
         0.1526, -0.0875,  0.0032,  0.1387, -0.0386,  0.1074, -0.0893,  0.1054,
        -0.2148, -0.0434, -0.0542, -0.0535,  0.0822, -0.0690,  0.1248,  0.0280,
         0.1521,  0.0464, -0.0152, -0.0392,  0.0839, -0.1604,  0.0613,  0.0637,
        -0.0301,  0.0233,  0.1172,  0.0545,  0.0624,  0.0356, -0.0447,  0.0486,
        -0.0241,  0.1341, -0.1891,  0.0771, -0.1029,  0.0451, -0.2112,  0.0242,
         0.0614,  0.0381, -0.1409,  0.0794,  0.1557,  0.1252, -0.1912, -0.0513,
         0.0164, -0.1631, -0.2106, -0.1857, -0.0961, -0.0538, -0.0268,  0.0579,
        -0.0878,  0.0193,  0.1369, -0.0993,  0.0764,  0.0061, -0.0328, -0.0439,
        -0.0764, -0.0879, -0.1499, -0.1666, -0.1153, -0.0122,  0.0214,  0.0373,
         0.0355, -0.0556, -0.1643, -0.0415, -0.0456, -0.1007,  0.0207,  0.0357,
        -0.0285, -0.1212, -0.2008, -0.1861,  0.0951, -0.1360, -0.1794, -0.0452,
         0.0461, -0.1835,  0.0256, -0.2096,  0.0868, -0.1112,  0.0854, -0.0353,
         0.0961,  0.1042, -0.1229, -0.1237, -0.1743,  0.0944,  0.0584,  0.0715,
         0.0611,  0.0897,  0.0298, -0.0499, -0.0390, -0.0559,  0.0242, -0.0215,
         0.0272,  0.0833,  0.0769, -0.1303, -0.0560, -0.0318,  0.1090,  0.0964,
        -0.0088, -0.0735, -0.0940,  0.0009, -0.1314,  0.0734, -0.0710,  0.1147,
         0.1128, -0.1978,  0.0762,  0.0846,  0.0190,  0.0353, -0.1189, -0.0841,
        -0.0147, -0.0961, -0.0161,  0.1045, -0.0182,  0.0063,  0.0478,  0.0402,
         0.0777,  0.0868, -0.1530, -0.0103, -0.0408,  0.1175, -0.0594, -0.0877,
        -0.0873, -0.0554, -0.0158, -0.0460, -0.0108,  0.0894, -0.0664,  0.0717,
        -0.1917, -0.0133,  0.0749,  0.0329,  0.0602, -0.0056,  0.1554,  0.1001,
         0.0724, -0.0690,  0.0498,  0.0381,  0.0939,  0.0990, -0.0499,  0.1485,
        -0.0809, -0.1173,  0.0898, -0.1177,  0.0375,  0.0772,  0.0995, -0.1831,
        -0.0039,  0.0534,  0.0290, -0.1169,  0.0089,  0.0854,  0.0924, -0.1582,
        -0.0314, -0.0823,  0.0012, -0.1171,  0.0165,  0.1799,  0.0288,  0.0834],
       device='cuda:0')
tensor([-0.0301, -0.0042, -0.0702, -0.0663, -0.0172, -0.0043, -0.0368, -0.0047,
        -0.0476, -0.0174, -0.0312, -0.0590, -0.0374, -0.0179, -0.0382,  0.0096,
         0.0056, -0.0367, -0.0390, -0.0643, -0.0119, -0.0376, -0.0105, -0.0058,
        -0.0090, -0.0256,  0.0079, -0.0500,  0.0745, -0.0523, -0.0359, -0.0542,
        -0.0201, -0.0693,  0.0121, -0.0359, -0.0216,  0.0015, -0.0553,  0.0204,
        -0.0365, -0.0043,  0.0053,  0.0404, -0.0133, -0.0187,  0.0485, -0.0074,
        -0.0454, -0.0356, -0.0122, -0.0074, -0.0504, -0.0620,  0.0119,  0.0293,
        -0.0264, -0.0047, -0.0239,  0.0205, -0.0193, -0.0346, -0.0410, -0.0163,
        -0.0170, -0.0141, -0.0356, -0.0470, -0.0045,  0.0260, -0.0324, -0.0169,
        -0.0271, -0.0012, -0.0184, -0.0241,  0.0141, -0.0311, -0.0309, -0.0088,
        -0.0341, -0.0255, -0.0206, -0.0171,  0.0381, -0.0225,  0.0217, -0.0569,
        -0.0418,  0.0311, -0.0394, -0.0189,  0.0011, -0.0330,  0.0517, -0.0350,
        -0.0039, -0.0271, -0.0809,  0.0040,  0.0696, -0.0374,  0.0456, -0.0143,
         0.0121, -0.0182, -0.0240, -0.0037, -0.0014, -0.0631,  0.0094,  0.0216,
        -0.0219, -0.0319, -0.0142, -0.0436,  0.0610, -0.0408, -0.0120,  0.0124,
         0.0059,  0.0003, -0.0156,  0.0118, -0.0203,  0.0220, -0.0325,  0.0135],
       device='cuda:0')
tensor([[[[ 0.0807]],

         [[-0.2474]],

         [[ 0.0127]],

         ...,

         [[-0.0256]],

         [[-0.1879]],

         [[ 0.0739]]],


        [[[ 0.1042]],

         [[-0.1865]],

         [[ 0.1085]],

         ...,

         [[-0.0086]],

         [[ 0.0390]],

         [[ 0.1274]]],


        [[[-0.1300]],

         [[ 0.0995]],

         [[-0.0082]],

         ...,

         [[-0.1117]],

         [[ 0.1541]],

         [[ 0.0292]]],


        ...,


        [[[ 0.1214]],

         [[ 0.0153]],

         [[ 0.0238]],

         ...,

         [[ 0.1587]],

         [[-0.0076]],

         [[ 0.0271]]],


        [[[-0.2232]],

         [[-0.0521]],

         [[-0.0761]],

         ...,

         [[-0.1448]],

         [[ 0.0705]],

         [[-0.0018]]],


        [[[ 0.1201]],

         [[ 0.0084]],

         [[ 0.0248]],

         ...,

         [[-0.0378]],

         [[ 0.0570]],

         [[ 0.0829]]]], device='cuda:0')